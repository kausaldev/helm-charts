{{- if .Values.backend.django.argoCdApplication.create -}}
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: {{ include "paths.backendDjangoArgoCdApplicationName" . }}
  namespace: {{ .Values.argoCd.namespace }}
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd-image-updater.argoproj.io/app.pull-secret: pullsecret:{{ .Values.argoCd.namespace }}/{{ .Values.argoCd.imagePullSecret.name }}
    argocd-image-updater.argoproj.io/app.update-strategy: digest # this assumes mutable tags; for immutable tags, better use semver
    argocd-image-updater.argoproj.io/image-list: app={{ .Values.backend.django.image.repository }}:{{ .Values.backend.django.image.tag }}
spec:
  project: default
  source:
    repoURL: {{ .Values.helmChartRepoUrl }}
    path: {{ .Values.backend.django.helmChartRepoPath }}
    targetRevision: {{ .Values.backend.django.helmChartRepoTargetRevision }}
    helm:
      valuesObject:
        fullnameOverride: django
        replicaCount: 3
        image:
          repository: {{ .Values.backend.django.image.repository }}
          tag: {{ .Values.backend.django.image.tag }}
        # command: "/bin/bash -c -- while true; do sleep 30; done;"  # useful for debugging the k8s deployment
        command: {{ .Values.backend.django.command }}
        imagePullSecrets:
          - name: {{ include "paths.imagePullSecretName" . }}
        envConfigs:
          DJANGO_SETTINGS_MODULE: paths.settings
          DEBUG: "{{ if .Values.debug }}1{{ else }}0{{ end }}"
          DEPLOYMENT_TYPE: {{ .Values.deploymentType }}
          ALLOWED_HOSTS: {{ include "paths.backendApiHost" . }},{{ include "paths.backendAdminHost" . }}
          HOSTNAME_INSTANCE_DOMAINS: {{ include "paths.deploymentDomain" . }}
          # TODO
          # MEDIA_FILES_S3_ENDPOINT: TODO
          # MEDIA_FILES_S3_BUCKET: TODO
          # MEDIA_FILES_S3_CUSTOM_DOMAIN: TODO
          REDIS_URL: redis://redis-master.{{ .Release.Namespace }}.svc.cluster.local
          # PYTHONIOENCODING: utf-8  # Probably it's better to set the locale (line below)
          LC_CTYPE: C.UTF-8
          CONFIGURE_LOGGING: "1"
          {{- if .Values.backend.django.sentry.enabled }}
          SENTRY_DSN: {{ .Values.backend.django.sentry.dsn }}
          {{- end }}
        envSecrets:
          DATABASE_URL: "postgresql://{{ .Values.backend.django.db.user }}:{{ .Values.backend.django.db.password }}@db-cluster-rw/{{ .Values.backend.django.db.database }}"
          SECRET_KEY: {{ include "paths.backendDjangoSecretKey" . }}
          AWS_ACCESS_KEY_ID: {{ .Values.backend.django.awsAccessKeyId }}
          AWS_SECRET_ACCESS_KEY: {{ .Values.backend.django.awsSecretAccessKey }}
        ingress:
          enabled: true
          annotations:
            cert-manager.io/cluster-issuer: lets-encrypt
            {{- with .Values.externalDnsTarget }}
            external-dns.alpha.kubernetes.io/target: {{ . }}
            {{- end }}
            traefik.ingress.kubernetes.io/router.middlewares: {{ print .Release.Namespace "-" (include "paths.backendAdminRedirectMiddlewareName" .) "@kubernetescrd" }}
          hosts:
            - host: {{ include "paths.backendAdminHost" . }}
              paths:
                - path: /
                  pathType: Prefix
            - host: {{ include "paths.backendApiHost" . }}
              paths:
                - path: /
                  pathType: Prefix
          tls:
            - hosts:
                - {{ include "paths.backendAdminHost" . }}
                - {{ include "paths.backendApiHost" . }}
              secretName: {{ include "paths.backendIngressTlsSecretName" . }}
        db:
          database: {{ .Values.backend.django.db.database }}
          user: {{ .Values.backend.django.db.user }}
          password: {{ .Values.backend.django.db.password }}
          cluster:
            backup:
              enabled: {{ .Values.backend.django.db.cluster.backup.enabled }}
              s3Secret:
                create: {{ .Values.backend.django.db.cluster.backup.s3Secret.create }}
                awsAccessKeyId: {{ .Values.backend.django.db.cluster.backup.s3Secret.awsAccessKeyId }}
                awsSecretAccessKey: {{ .Values.backend.django.db.cluster.backup.s3Secret.awsSecretAccessKey }}
              endpointUrl: {{ .Values.backend.django.db.cluster.backup.endpointUrl }}
              destinationPath: {{ .Values.backend.django.db.cluster.backup.destinationPath }}
            bootstrapRecovery:
              enabled: {{ .Values.backend.django.db.cluster.bootstrapRecovery.enabled }}
        redis:
          fullnameOverride: redis
          architecture: standalone  # default: replication
          auth:
            enabled: false
        # FIXME: readiness / liveness probes don't work because we need to put some cluster IP in ALLOWED_HOSTS
        probes:
          liveness:
            enabled: false
          readiness:
            enabled: false
        dbMigrations:
          enabled: {{ .Values.backend.django.dbMigrations.enabled }}
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: {{ .Release.Namespace }}
  {{- if .Values.backend.django.argoCdApplication.enableAutoSync }}
  syncPolicy:
    automated:
      prune: true
  {{- end }}
{{- end -}}
